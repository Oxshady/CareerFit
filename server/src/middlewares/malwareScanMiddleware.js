const axios = require('axios');
const fs = require('fs');
const path = require('path');

// Metadefender API Key
const API_KEY = "f552a744968f45b31ad34a7eca752c88"; // Replace with your API key
const API_URL = 'https://api.metadefender.com/v4/file';

// Function to scan file using Metadefender API
const scanFile = async (filePath) => {
  const fileData = fs.readFileSync(filePath);
  
  try {
    // Upload the file to Metadefender
    const response = await axios.post(API_URL, fileData, {
      headers: {
        'apikey': API_KEY,
        'Content-Type': 'application/octet-stream',
      },
    });

    // Get scan report
    const fileId = response.data.data_id;
    const report = await axios.get(`${API_URL}/${fileId}`, {
      headers: { 'apikey': API_KEY },
    });
    console.log(report.data)
    // Check the scan result
    const malicious = report.data.data.scan_results.scan_all_result_a === 'Malicious';
    if (malicious) {
      throw new Error('Malware detected in the uploaded file!');
    }

    return 'File is clean';
  } catch (error) {
    if (error.response) {
      console.error('Error response:', error.response.data);
    } else {
      console.error('Error:', error.message);
    }
    throw new Error('Error scanning file: ' + error.message);
  }
};

const malwareScanMiddleware = async (req, res, next) => {
  if (!req.file) {
    return res.status(400).json({ message: 'No file uploaded' });
  }

  try {
    // Scan the uploaded file using Metadefender
    await scanFile(req.file.path);
    next(); // Proceed to the next middleware (upload to Cloudinary)
  } catch (error) {
    // If malware is detected, delete the file and respond with an error
    if (req.file && req.file.path) {
      fs.unlink(req.file.path, (err) => {
        if (err) {
          console.error('Error deleting file:', err);
        }
      });
    }

    console.error(error);
    res.status(400).json({ message: error.message });
  }
};

module.exports = malwareScanMiddleware;
